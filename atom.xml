<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Like World]]></title>
  <link href="http://zhoulike.github.io/atom.xml" rel="self"/>
  <link href="http://zhoulike.github.io/"/>
  <updated>2014-04-10T14:22:25+08:00</updated>
  <id>http://zhoulike.github.io/</id>
  <author>
    <name><![CDATA[Like]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[求平方根算法]]></title>
    <link href="http://zhoulike.github.io/blog/2014/04/10/sqrt/"/>
    <updated>2014-04-10T13:01:28+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/04/10/sqrt</id>
    <content type="html"><![CDATA[<h3>1. 牛顿法</h3>

<p>先猜一个初值，然后依次迭代，直到结果足够精确。比如求number的平方根：</p>

<blockquote><ul>
<li>X0 = guess</li>
<li>X1 = (X0 + number / X0) / 2</li>
<li>X2 = (X1 + number / X1) / 2</li>
<li>&hellip;&hellip;</li>
<li>Xn = (Xn-1 + number / Xn-1) / 2</li>
</ul>
</blockquote>

<p>结束条件可以是 abs(Xn * Xn &ndash; number) 小于某个数，或者两次迭代结果 abs(Xn &ndash; Xn-1) 小于某个数.</p>

<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="n">sqrt_newton</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">val</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">prev</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">prev</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="n">prev</span> <span class="o">+</span> <span class="n">x</span> <span class="o">/</span> <span class="n">prev</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">val</span> <span class="o">-</span> <span class="n">prev</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">epsilon</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：上面这个代码不能使用第一个条件判断。因为此时求sqrt_newton(3)时，abs(val * val &ndash; x)最后一直是4.44089e-16，而numeric_limits<double>::epsilon()是2.22045e-16。这样就导致了死循环。这应该是由于浮点数的精度问题导致的。
如果要使用第一个条件，可以用 abs(val * val &ndash; x) > 0.00000001。</p>

<h3>2. 二分法</h3>

<p>二分法就是每次取中间的值，然后比较。直到结果足够精确。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">double</span> <span class="n">sqrt_bi</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">prev</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mid</span> <span class="o">*</span> <span class="n">mid</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">prev</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>        <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">mid</span> <span class="o">-</span> <span class="n">prev</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">epsilon</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 不知所云法</h3>

<p>QUAKE-III里用来计算1/sqrt(x)的算法，速度快。
这里的float不能改成double，改成double就不对了。</p>

<p>还有个问题是，下面这个算法求出的结果精度会有点问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">float</span> <span class="n">sqrt_magic</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">float</span> <span class="n">threehalfs</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">x2</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mh">0x5f3759df</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="o">*</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span><span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span><span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span><span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span><span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>补充知识：C++中的numeric_limits</h3>

<p>numeric_limits定义于limits头文件中，主要用于取代C语言中limits.h中的那些宏。具体见<a href="http://en.cppreference.com/w/cpp/types/numeric_limits">它的参考页面</a></p>

<p>比如，</p>

<blockquote><ul>
<li><p>INT_MAX和INT_MIN使用numeric_limits&lt;int>::max()和numeric_limits&lt;int>::min()代替。</p></li>
<li><p>DBL_EPSILON使用numeric_limits&lt;double>::epsilon()代替</p></li>
</ul>
</blockquote>

<h4>References：</h4>

<p>[1] <a href="http://www.cnblogs.com/pkuoliver/archive/2010/10/06/1844725.html">一个Sqrt函数引发的血案</a></p>

<p>[2] <a href="http://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95">维基百科-牛顿法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cc150总结-1. Arrays and Strings]]></title>
    <link href="http://zhoulike.github.io/blog/2014/03/14/cc150-1/"/>
    <updated>2014-03-14T20:58:33+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/03/14/cc150-1</id>
    <content type="html"><![CDATA[<p>重点推荐1.8</p>

<h3>1.1 查看字符串中的字符是否唯一的，如果不使用额外的数据结构怎么做？</h3>

<p>A： 核心思路是记录每个字符出现的次数，如果某个字符出现第二次，就返回false。否则返回true。有下面3种解法，代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.1.cpp">在此</a>:</p>

<blockquote><ul>
<li>最简单的方法是使用Hash表。</li>
<li>因为字符最多只有256个，可以用一个包含256个元素的bool数组。</li>
<li>使用位图，只需要256位，也就是大小为32的char数组。</li>
</ul>
</blockquote>

<h3>1.2 实现void reverse(char *str)</h3>

<p>A: 使用前后指针同时操作。但这个函数必须保证str是字符数组，而不能是字符串常量。比如reverse(&ldquo;haha&rdquo;)就会报段错误。正确的函数应该是返回一个指向reversed字符串的指针。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.2.cpp">在此</a></p>

<h3>1.3 给定两个字符串，判定一个字符串是否是另一个字符串的排列</h3>

<p>A：借用1.1的思路，使用包含256个元素的数组，统计两个字符串上的元素是否都一样。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.3.cpp">在此</a></p>

<h3>1.4 写一个函数将所有的空格替换成%20</h3>

<p>A：先统计有多少个空格，从字符串尾部开始将字符移动到正确位置，当遇到空格时，就使用%20替换。简单的题目要写出bug free的代码。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.4.cpp">在此</a></p>

<h3>1.5 压缩字符串，如果压缩后的长度不比原来的字符串短，就返回原来的字符串。比如aabcccccaaa &ndash;> a2b1c5a3</h3>

<p>A：基本思路就是查看邻近的字符，相同就增加计数，不同就添加到压缩串里。（这里要注意边界条件，比如最后一组等）代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.5.cpp">在此</a></p>

<h3>1.6 将N×N的矩阵顺时针旋转90度，最好在原地进行。</h3>

<p>A：这道题的主要思路就是找到旋转时，4个点的关系。旋转是一层一层来，从最外层到最里层。可以通过实例来推导关系，比如一个4×4的矩阵：</p>

<blockquote><ul>
<li>(0, 0) &ndash;> (0, 3) &ndash;> (3, 3) &ndash;> (3, 0) &ndash;> (0, 0)</li>
<li>(0, 1) &ndash;> (1, 3) &ndash;> (3, 2) &ndash;> (2, 0) &ndash;> (0, 1)</li>
<li>(0, 2) &ndash;> (2, 3) &ndash;> (3, 1) &ndash;> (1, 0) &ndash;> (0, 2)</li>
<li>(1, 1) &ndash;> (1, 2) &ndash;> (2, 2) &ndash;> (2, 1) &ndash;> (1, 1)</li>
</ul>
</blockquote>

<p>总结关系如下：</p>

<blockquote><ul>
<li>i = （0, 1, &hellip;), j = (n &ndash; 1, n -2 , &hellip;), i &lt; j。i最多只到一半的行，因为后半行已经旋转过了。j代表外面的层</li>
<li>k = (i, i + 1, &hellip;, j &ndash; 1)。k是每一行的元素。</li>
<li>l = n &ndash; k &ndash; 1。即l + k = n &ndash; 1。</li>
</ul>
</blockquote>

<p>通用关系如下(i, k) &ndash;> (k, j) &ndash;> (j, l) &ndash;> (l, i) &ndash;> (i, k)。有这个关系，代码就很简单了，<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.6.cpp">在此</a></p>

<h3>1.7 如果M×N矩阵中，有一个元素为0,那么就将该行该列都清0</h3>

<p>A：书中的解法需要O（n）的空间，实际上解法可以优化到O（1）空间，即使用第0行和第0列来记录某一行某一列中是否有0.但是需要注意的是需要单独统计第0行或第0列中最开始时是否有0,这样需要清空第0行或第0列。如果不加以区别，会有额外的元素被清零。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.7.cpp">在此</a></p>

<h3><em>1.8 给定两个字符串s1和s2,判断s2是否可以通过s1旋转而来（只使用一次isSubstring)。比如waterbottle是由erbottlewat旋转过来的。（重点推荐)</em></h3>

<p>A: 这道题没想出只调用一次isSubstring的方法。。不过看了答案后，又学到一招。</p>

<p>常规方法是依次遍历s1，然后判断前后两部分是否都是s2的子串。但这需要调用太多次isSubstring了。</p>

<p>书上精妙的解法：
假设 s1 = xy, 如果s2由s1旋转而来，s2 = yx
那么两个s1拼接起来就是： s1s1 = xyxy，从这里可以看出s2是s1s1的子串。太妙了！！！代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.8.cpp">在此</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LevelDB安装及试玩]]></title>
    <link href="http://zhoulike.github.io/blog/2014/01/20/leveldban-zhuang-ji-shi-wan/"/>
    <updated>2014-01-20T21:05:40+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/01/20/leveldban-zhuang-ji-shi-wan</id>
    <content type="html"><![CDATA[<p>LevelDB的核心代码很短，1W行不到的样子。注释详细，可以用来学习C++在实际工程项目上的用法。</p>

<h3>安装LevelDB</h3>

<p>安装很简单，环境为Ubuntu 12.04</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://code.google.com/p/leveldb/
</span><span class='line'><span class="nb">cd </span>leveldb
</span><span class='line'>make
</span><span class='line'>sudo cp -r include/leveldb /usr/local/include/
</span><span class='line'>sudo cp -r libleveldb.so* /usr/local/lib/
</span><span class='line'>sudo ldconfig
</span></code></pre></td></tr></table></div></figure>


<h3>简单试用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;leveldb/db.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">leveldb</span><span class="o">::</span><span class="n">DB</span> <span class="o">*</span><span class="n">db</span><span class="p">;</span>
</span><span class='line'>  <span class="n">leveldb</span><span class="o">::</span><span class="n">Options</span> <span class="n">option</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">option</span><span class="p">.</span><span class="n">create_if_missing</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">leveldb</span><span class="o">::</span><span class="n">DB</span><span class="o">::</span><span class="n">Open</span><span class="p">(</span><span class="n">option</span><span class="p">,</span> <span class="s">&quot;/tmp/leveldb_t&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">db</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;Name&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&quot;Like&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">db</span><span class="o">-&gt;</span><span class="n">Put</span><span class="p">(</span><span class="n">leveldb</span><span class="o">::</span><span class="n">WriteOptions</span><span class="p">(),</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;Major&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s">&quot;Computer Science and Technology&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">db</span><span class="o">-&gt;</span><span class="n">Put</span><span class="p">(</span><span class="n">leveldb</span><span class="o">::</span><span class="n">WriteOptions</span><span class="p">(),</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">ret_s</span><span class="p">;</span>
</span><span class='line'>  <span class="n">db</span><span class="o">-&gt;</span><span class="n">Get</span><span class="p">(</span><span class="n">leveldb</span><span class="o">::</span><span class="n">ReadOptions</span><span class="p">(),</span> <span class="s">&quot;Name&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ret_s</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;key = Name&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span>
</span><span class='line'>       <span class="o">&lt;&lt;</span> <span class="s">&quot;value = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ret_s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">db</span><span class="o">-&gt;</span><span class="n">Get</span><span class="p">(</span><span class="n">leveldb</span><span class="o">::</span><span class="n">ReadOptions</span><span class="p">(),</span> <span class="s">&quot;Major&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ret_s</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;key = Major&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span>
</span><span class='line'>       <span class="o">&lt;&lt;</span> <span class="s">&quot;value = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ret_s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">delete</span> <span class="n">db</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译运行也很简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>g++ test.cpp -lleveldb
</span><span class='line'>./a.out
</span></code></pre></td></tr></table></div></figure>


<h4>References：</h4>

<p>[1] <a href="http://www.puritys.me/docs-blog/article-112">Google LevelDB 試玩心得</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Python画CDF图]]></title>
    <link href="http://zhoulike.github.io/blog/2014/01/08/shi-yong-pythonhua-cdftu/"/>
    <updated>2014-01-08T19:43:06+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/01/08/shi-yong-pythonhua-cdftu</id>
    <content type="html"><![CDATA[<h3>依赖包：numpy, matplotlib, statsmodels</h3>

<ul>
<li>可以使用sudo apt-get install python-numpy python-matplotlib安装前两个</li>
<li>ubuntu 12.04里没新版的statsmodels，使用pip安装。它依赖于pandas和patsy，都可以通过pip安装</li>
</ul>


<h3>实现代码借鉴于参考文献[1]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="kn">as</span> <span class="nn">sm</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cdf_plot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    data: 一组数据</span>
</span><span class='line'><span class="sd">    name: 在legend上显示的名称</span>
</span><span class='line'><span class="sd">    number: 数据最大最小值之间划分多少段</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">ecdf</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">distributions</span><span class="o">.</span><span class="n">ECDF</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="nb">max</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="n">ecdf</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#plt.step(x, y, label=name)</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">float</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cdf_plot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#plt.xscale(&#39;log&#39;)</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">0.65</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">),</span> <span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">borderaxespad</span><span class="o">=</span><span class="mf">0.</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span> <span class="c">#显示CDF图</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>将代码保存为cdf.py，即可运行。后面跟几个文件，每个文件全是数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./cdf.py data1 data2 data3
</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<p>[1] <a href="http://stackoverflow.com/questions/3209362/how-to-plot-empirical-cdf-in-matplotlib-in-python">How to plot empirical cdf in matplotlib in Python?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://zhoulike.github.io/blog/2013/12/10/hello-world/"/>
    <updated>2013-12-10T12:52:39+08:00</updated>
    <id>http://zhoulike.github.io/blog/2013/12/10/hello-world</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
