<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithms | Like World]]></title>
  <link href="http://zhoulike.github.io/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://zhoulike.github.io/"/>
  <updated>2014-10-15T15:59:39+08:00</updated>
  <id>http://zhoulike.github.io/</id>
  <author>
    <name><![CDATA[Like]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cc150总结-4. Trees and Graphs]]></title>
    <link href="http://zhoulike.github.io/blog/2014/06/11/cc150-4/"/>
    <updated>2014-06-11T21:01:50+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/06/11/cc150-4</id>
    <content type="html"><![CDATA[<h1>基本纲领</h1>

<p>树形结构的特征很明显：子树也是树（废话）&hellip;所以，首先要想到的解法就是递归。然后具体方法又分为自顶向下（Top-down）和自底向上（Bottom-up）。</p>

<p>图的算法就那么多吧&hellip;这章就一个图的题。</p>

<h3>4.1 实现一个函数判断一个二叉树是不是平衡的。</h3>

<ul>
<li>解法1：一个函数求树的高度，然后判断当前树是否平衡。如果平衡就判断子树是否平衡（Top-down）。这个解法的缺点是重复访问底层的节点。</li>
<li>解法2：递归到最底层，然后从下往上计算各个节点的高度（不需要单独一个函数计算）。然后再从底向上判断树是否平衡（Bottom-up）。 优点就是每个节点只会访问一次。</li>
</ul>


<p>代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.1.cc">在此</a></p>

<h3>4.2 判断图中两个节点的连通性</h3>

<p>可以使用BFS和DFS。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.2.cc">在此</a></p>

<h3>4.3  通过一个有序数组创建二叉搜索树，使得其高度最低（平衡二叉树吧）</h3>

<p>方法很简单，选中间的节点作为根节点，然后使用前半段区间递归生成左子树，后半段区间生成右子树。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.3.cc">在此</a></p>

<h3>4.4 将树的每层节点串起来成D个链表，D是树的高度</h3>

<p>这里显然要用到层次遍历。但是要稍微修改下传统的层次遍历。由于这里最终结果是D个链表，那么就不需要使用队列了。用链表模拟队列。同时维护两个链表。一个链表包含当前这层的节点，另一个链表包含下层节点。然后一层一层往下。将每层节点的链表直接添加到result中。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.4.cc">在此</a></p>

<h3>4.5 检查一个二叉树是否是二叉搜索树</h3>

<ul>
<li>解法1：自顶向下，维护一对minVal和maxVal。只有当前节点的值在这个区间，才是二叉搜索树。</li>
<li>解法2：使用二叉搜索树的特性。它的中序遍历必然是有序的。然后只需要一个变量指出它的前驱节点就好了（通过中序遍历）。当前节点需要大于（或等于）其前驱节点。</li>
</ul>


<p>代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.5.cc">在此</a></p>

<h3>4.6 需找二叉搜索树中一个节点的后继</h3>

<p>后继就是：1）如果有右子树，那么右子树最左边的节点就是其后继。2）往父节点走，第一个右父节点（自己体会下右父节点的意思，第一个向右走的父节点）就是其后继。</p>

<p>代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.6.cc">在此</a></p>

<h3>4.7 寻找两个节点第一个共同祖先，不使用某数据结构存放额外节点</h3>

<h4>情形一：节点中包含parent指针</h4>

<p>书上描述的太复杂，实际上有个很简单的解法：把parent当做list的next指针。然后需要做的是：1）找到node1的root节点，并将他们连成一个环：root->parent = node1；2）现在问题就变成了node1和node2是否相交，如果相交，找出第一个相交节点。就是进入环的节点。解法就很简单了，list里做过的。完事后记得还原root->parent。</p>

<h4>情形二：节点中不包含parent指针</h4>

<ul>
<li>解法一：自顶向下。1）写个函数covers判断某树是否包含某节点)； 2）判断左子树是否包含node1，右子树是否包含node2。如果是这样，那么root就是第一个祖先了；3）如果不是，那么遍历包含两个节点的子树。缺点就是重复访问底层节点。</li>
<li>解法二：自底向上。我想的，跟书上不太一样。用一个元祖(p1, p2)维护包含(node1, node2)的祖先。从最底层开始（初始(null,null))。直到某个节点p1和p2都不再是nullptr。那么就找到第一个公共祖先了。</li>
</ul>


<p>代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.7.cc">在此</a></p>

<h3>4.8 两个二叉树：T1有百万节点，T2有数百个节点。判断T2是否是T1的子树（注意，中间那一部分是不能叫子树的）</h3>

<ul>
<li>解法一：这是根据树的性质来的，如果是子树，T1那么两种遍历（前序+中序，其他也可以）产生的字符串里必然包含T2的遍历结果。这种方法快（O(m + n)）。但是需要大量的空间（O(m + n))。</li>
<li>解法二：自顶向下。写一个函数判断两棵树是否相同。然后依次判断T1是否和T2相同，T1的子树（左右）是否和T2相同。这种方法慢（最差O(mn)），但需要的空间小（递归产生的空间O(log(m) + log(n)))。</li>
<li>解法三：有更好的解法么？题目强调了百万，就在想是不是有更好的解法。最开始想的是解法二，以为这是很笨的解法。结果答案里也是这解法&hellip;</li>
</ul>


<p>代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.8.cc">在此</a></p>

<h3>4.9 二叉树的节点包含一个数值，设计个算法，打印一条路径使得它的总和等于一个给定值。这条路径不需要从root开始或以leaf结束</h3>

<ul>
<li>解法一：自顶向下。用数组维护自开始节点以来的路径，只要结果等于sum就打印路径，一直遍历到null。然后开始回溯，直到数组为空，然后设定子树的根节点为起始节点，重复操作。这个解法会重复访问底层节点。</li>
<li>解法二：自顶向下。优化上面的解法，使得不需要重复遍历节点。使用数组维护自根节点到当前节点的path，然后在path里从后往前累加，只要累加值等于给定的值，就打印这个path。所有节点只需遍历一遍。</li>
</ul>


<p>代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/4.9.cc">在此</a></p>

<h1>总结</h1>

<p>树的题目一般有两个解法：自顶向下和自底向上：</p>

<ul>
<li>自顶向下解法直观，但通常会重复访问底层的节点。</li>
<li>自底向上需要维护额外的变量，用来纪录底部以来的状态。好处是通常只遍历每个节点一次。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求平方根算法]]></title>
    <link href="http://zhoulike.github.io/blog/2014/04/10/sqrt/"/>
    <updated>2014-04-10T13:01:28+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/04/10/sqrt</id>
    <content type="html"><![CDATA[<h3>1. 牛顿法</h3>

<p>先猜一个初值，然后依次迭代，直到结果足够精确。比如求number的平方根：</p>

<blockquote><ul>
<li>X0 = guess</li>
<li>X1 = (X0 + number / X0) / 2</li>
<li>X2 = (X1 + number / X1) / 2</li>
<li>&hellip;&hellip;</li>
<li>Xn = (Xn-1 + number / Xn-1) / 2</li>
</ul>
</blockquote>

<p>结束条件可以是 abs(Xn * Xn &ndash; number) 小于某个数，或者两次迭代结果 abs(Xn &ndash; Xn-1) 小于某个数.</p>

<p>代码如下：</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include <cmath></h1>

<h1>include <limits></h1>

<p>using namespace std;</p>

<p>double sqrt_newton(double x)
{</p>

<pre><code>if (x &lt;= 0)
    return x;

double val = x, prev;

do {
    prev = val;
    val = (prev + x / prev) / 2;
} while(abs(val - prev) &gt; numeric_limits&lt;double&gt;::epsilon());

return val;
</code></pre>

<p>}
```</p>

<p>注意：上面这个代码不能使用第一个条件判断。因为此时求sqrt_newton(3)时，abs(val * val &ndash; x)最后一直是4.44089e-16，而numeric_limits<double>::epsilon()是2.22045e-16。这样就导致了死循环。这应该是由于浮点数的精度问题导致的。
如果要使用第一个条件，可以用 abs(val * val &ndash; x) > 0.00000001。</p>

<h3>2. 二分法</h3>

<p>二分法就是每次取中间的值，然后比较。直到结果足够精确。</p>

<p>```cpp
double sqrt_bi(double x)
{</p>

<pre><code>if (x &lt;= 0)
    return x;

double low = 0, high = x;
double mid = (low + high) / 2, prev;

do {
    if (mid * mid &gt; x)
        high = mid;
    else
        low = mid;

    prev = mid;
    mid = low + (high - low) / 2;
} while(abs(mid - prev) &gt; numeric_limits&lt;double&gt;::epsilon());

return mid;
</code></pre>

<p>}
```</p>

<h3>3. 不知所云法</h3>

<p>QUAKE-III里用来计算1/sqrt(x)的算法，速度快。
这里的float不能改成double，改成double就不对了。</p>

<p>还有个问题是，下面这个算法求出的结果精度会有点问题。</p>

<p>```cpp
float sqrt_magic(float x)
{</p>

<pre><code>long i;
float x2, y;
const float threehalfs = 1.5;

x2 = x * 0.5;
y = x;
i = * (long *) &amp;y;
i = 0x5f3759df - (i &gt;&gt; 1);
y = * (float *) &amp;i;
y = y * (threehalfs - (x2 * y * y));
y = y * (threehalfs - (x2 * y * y));

return 1 / y;
</code></pre>

<p>}
```</p>

<h3>补充知识：C++中的numeric_limits</h3>

<p>numeric_limits定义于limits头文件中，主要用于取代C语言中limits.h中的那些宏。具体见<a href="http://en.cppreference.com/w/cpp/types/numeric_limits">它的参考页面</a></p>

<p>比如，</p>

<blockquote><ul>
<li><p>INT_MAX和INT_MIN使用numeric_limits&lt;int>::max()和numeric_limits&lt;int>::min()代替。</p></li>
<li><p>DBL_EPSILON使用numeric_limits&lt;double>::epsilon()代替</p></li>
</ul>
</blockquote>

<h4>References：</h4>

<p>[1] <a href="http://www.cnblogs.com/pkuoliver/archive/2010/10/06/1844725.html">一个Sqrt函数引发的血案</a></p>

<p>[2] <a href="http://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95">维基百科-牛顿法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cc150总结-1. Arrays and Strings]]></title>
    <link href="http://zhoulike.github.io/blog/2014/03/14/cc150-1/"/>
    <updated>2014-03-14T20:58:33+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/03/14/cc150-1</id>
    <content type="html"><![CDATA[<p>重点推荐1.8</p>

<h3>1.1 查看字符串中的字符是否唯一的，如果不使用额外的数据结构怎么做？</h3>

<p>A： 核心思路是记录每个字符出现的次数，如果某个字符出现第二次，就返回false。否则返回true。有下面3种解法，代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.1.cpp">在此</a>:</p>

<blockquote><ul>
<li>最简单的方法是使用Hash表。</li>
<li>因为字符最多只有256个，可以用一个包含256个元素的bool数组。</li>
<li>使用位图，只需要256位，也就是大小为32的char数组。</li>
</ul>
</blockquote>

<h3>1.2 实现void reverse(char *str)</h3>

<p>A: 使用前后指针同时操作。但这个函数必须保证str是字符数组，而不能是字符串常量。比如reverse(&ldquo;haha&rdquo;)就会报段错误。正确的函数应该是返回一个指向reversed字符串的指针。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.2.cpp">在此</a></p>

<h3>1.3 给定两个字符串，判定一个字符串是否是另一个字符串的排列</h3>

<p>A：借用1.1的思路，使用包含256个元素的数组，统计两个字符串上的元素是否都一样。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.3.cpp">在此</a></p>

<h3>1.4 写一个函数将所有的空格替换成%20</h3>

<p>A：先统计有多少个空格，从字符串尾部开始将字符移动到正确位置，当遇到空格时，就使用%20替换。简单的题目要写出bug free的代码。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.4.cpp">在此</a></p>

<h3>1.5 压缩字符串，如果压缩后的长度不比原来的字符串短，就返回原来的字符串。比如aabcccccaaa &ndash;> a2b1c5a3</h3>

<p>A：基本思路就是查看邻近的字符，相同就增加计数，不同就添加到压缩串里。（这里要注意边界条件，比如最后一组等）代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.5.cpp">在此</a></p>

<h3>1.6 将N×N的矩阵顺时针旋转90度，最好在原地进行。</h3>

<p>A：这道题的主要思路就是找到旋转时，4个点的关系。旋转是一层一层来，从最外层到最里层。可以通过实例来推导关系，比如一个4×4的矩阵：</p>

<blockquote><ul>
<li>(0, 0) &ndash;> (0, 3) &ndash;> (3, 3) &ndash;> (3, 0) &ndash;> (0, 0)</li>
<li>(0, 1) &ndash;> (1, 3) &ndash;> (3, 2) &ndash;> (2, 0) &ndash;> (0, 1)</li>
<li>(0, 2) &ndash;> (2, 3) &ndash;> (3, 1) &ndash;> (1, 0) &ndash;> (0, 2)</li>
<li>(1, 1) &ndash;> (1, 2) &ndash;> (2, 2) &ndash;> (2, 1) &ndash;> (1, 1)</li>
</ul>
</blockquote>

<p>总结关系如下：</p>

<blockquote><ul>
<li>i = （0, 1, &hellip;), j = (n &ndash; 1, n -2 , &hellip;), i &lt; j。i最多只到一半的行，因为后半行已经旋转过了。j代表外面的层</li>
<li>k = (i, i + 1, &hellip;, j &ndash; 1)。k是每一行的元素。</li>
<li>l = n &ndash; k &ndash; 1。即l + k = n &ndash; 1。</li>
</ul>
</blockquote>

<p>通用关系如下(i, k) &ndash;> (k, j) &ndash;> (j, l) &ndash;> (l, i) &ndash;> (i, k)。有这个关系，代码就很简单了，<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.6.cpp">在此</a></p>

<h3>1.7 如果M×N矩阵中，有一个元素为0,那么就将该行该列都清0</h3>

<p>A：书中的解法需要O（n）的空间，实际上解法可以优化到O（1）空间，即使用第0行和第0列来记录某一行某一列中是否有0.但是需要注意的是需要单独统计第0行或第0列中最开始时是否有0,这样需要清空第0行或第0列。如果不加以区别，会有额外的元素被清零。代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.7.cpp">在此</a></p>

<h3><em>1.8 给定两个字符串s1和s2,判断s2是否可以通过s1旋转而来（只使用一次isSubstring)。比如waterbottle是由erbottlewat旋转过来的。（重点推荐)</em></h3>

<p>A: 这道题没想出只调用一次isSubstring的方法。。不过看了答案后，又学到一招。</p>

<p>常规方法是依次遍历s1，然后判断前后两部分是否都是s2的子串。但这需要调用太多次isSubstring了。</p>

<p>书上精妙的解法：
假设 s1 = xy, 如果s2由s1旋转而来，s2 = yx
那么两个s1拼接起来就是： s1s1 = xyxy，从这里可以看出s2是s1s1的子串。太妙了！！！代码<a href="https://github.com/zhoulike/algorithms/blob/master/cc150/1.8.cpp">在此</a></p>
]]></content>
  </entry>
  
</feed>
