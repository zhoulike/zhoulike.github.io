<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Key-Value | Like World]]></title>
  <link href="http://zhoulike.github.io/blog/categories/key-value/atom.xml" rel="self"/>
  <link href="http://zhoulike.github.io/"/>
  <updated>2014-05-08T17:06:28+08:00</updated>
  <id>http://zhoulike.github.io/</id>
  <author>
    <name><![CDATA[Like]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LevelDB——Arena分析]]></title>
    <link href="http://zhoulike.github.io/blog/2014/05/08/leveldb-arena/"/>
    <updated>2014-05-08T16:58:16+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/05/08/leveldb-arena</id>
    <content type="html"><![CDATA[<p>Arena可以单次申请内存，但不能单次释放内存。只有当Arena析构时，才会释放所有申请的内存。另外，Arena允许浪费内存，所以整个Arena的实现就很简洁。</p>

<p>```cpp  分配bytes大小的空间
inline char* Arena::Allocate(size_t bytes) {
  assert(bytes > 0);
  if (bytes &lt;= alloc_bytes_remaining_) {  //如果有足够的剩余内存，就直接分配</p>

<pre><code>char* result = alloc_ptr_;
alloc_ptr_ += bytes;
alloc_bytes_remaining_ -= bytes;
return result;
</code></pre>

<p>  }
  return AllocateFallback(bytes);  //否则就从新分配的一块内存里分配
}
```</p>

<p>```cpp  分配bytes大小的空间，返回的地址是内存对齐的
char<em> Arena::AllocateAligned(size_t bytes) {
  const int align = (sizeof(void</em>) > 8) ? sizeof(void<em>) : 8; //最小8字节对齐
  assert((align &amp; (align-1)) == 0);   // Pointer size should be a power of 2
  size_t current_mod = reinterpret_cast&lt;uintptr_t>(alloc_ptr_) &amp; (align-1); //当前指针超出对齐边界的字节数
  size_t slop = (current_mod == 0 ? 0 : align &ndash; current_mod); //需要调整的字节数
  size_t needed = bytes + slop;
  char</em> result;
  if (needed &lt;= alloc_bytes_remaining_) { //有足够的剩余内存，就直接分配</p>

<pre><code>result = alloc_ptr_ + slop;
alloc_ptr_ += needed;
alloc_bytes_remaining_ -= needed;
</code></pre>

<p>  } else {</p>

<pre><code>// AllocateFallback always returned aligned memory
result = AllocateFallback(bytes);  //否则就从新分配的一块内存里分配
</code></pre>

<p>  }
  assert((reinterpret_cast&lt;uintptr_t>(result) &amp; (align-1)) == 0);
  return result;
}
```</p>

<p>```cpp 根据情况申请大块内存
static const int kBlockSize = 4096;</p>

<p>char* Arena::AllocateFallback(size_t bytes) {
  if (bytes > kBlockSize / 4) {  //申请大内存，就直接申请一块</p>

<pre><code>char* result = AllocateNewBlock(bytes);
return result;
</code></pre>

<p>  }</p>

<p>  //前面剩余的内存就浪费掉了
  alloc_ptr<em> = AllocateNewBlock(kBlockSize);
  alloc_bytes_remaining</em> = kBlockSize;</p>

<p>  char* result = alloc_ptr<em>;
  alloc_ptr</em> += bytes;
  alloc_bytes_remaining_ &ndash;= bytes;
  return result;
}
```</p>

<p><code>cpp  一次性分配block_bytes大小的空间
char* Arena::AllocateNewBlock(size_t block_bytes) {
  char* result = new char[block_bytes];
  blocks_memory_ += block_bytes;
  blocks_.push_back(result);
  return result;
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LevelDB安装及试玩]]></title>
    <link href="http://zhoulike.github.io/blog/2014/01/20/leveldban-zhuang-ji-shi-wan/"/>
    <updated>2014-01-20T21:05:40+08:00</updated>
    <id>http://zhoulike.github.io/blog/2014/01/20/leveldban-zhuang-ji-shi-wan</id>
    <content type="html"><![CDATA[<p>LevelDB的核心代码很短，1W行不到的样子。注释详细，可以用来学习C++在实际工程项目上的用法。</p>

<h3>安装LevelDB</h3>

<p>安装很简单，环境为Ubuntu 12.04</p>

<p><code>sh
git clone https://code.google.com/p/leveldb/
cd leveldb
make
sudo cp -r include/leveldb /usr/local/include/
sudo cp -r libleveldb.so* /usr/local/lib/
sudo ldconfig
</code></p>

<h3>简单试用</h3>

<p>```cpp</p>

<h1>include &ldquo;leveldb/db.h&rdquo;</h1>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>int main()
{</p>

<pre><code>leveldb::DB *db;
leveldb::Options option;

option.create_if_missing = true;
leveldb::DB::Open(option, "/tmp/leveldb_t", &amp;db);

string key = "Name";
string value = "Like";
db-&gt;Put(leveldb::WriteOptions(), key, value);

key = "Major";
value = "Computer Science and Technology";
db-&gt;Put(leveldb::WriteOptions(), key, value);


string ret_s;
db-&gt;Get(leveldb::ReadOptions(), "Name", &amp;ret_s);
cout &lt;&lt; "key = Name" &lt;&lt; endl
     &lt;&lt; "value = " &lt;&lt; ret_s &lt;&lt; endl;

db-&gt;Get(leveldb::ReadOptions(), "Major", &amp;ret_s);
cout &lt;&lt; "key = Major" &lt;&lt; endl
     &lt;&lt; "value = " &lt;&lt; ret_s &lt;&lt; endl;

delete db;
return 0;
</code></pre>

<p>}
```</p>

<p>编译运行也很简单：</p>

<p><code>sh
g++ test.cpp -lleveldb
./a.out
</code></p>

<h4>References：</h4>

<p>[1] <a href="http://www.puritys.me/docs-blog/article-112">Google LevelDB 試玩心得</a></p>
]]></content>
  </entry>
  
</feed>
